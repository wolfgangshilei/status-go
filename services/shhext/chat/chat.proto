syntax = "proto3";

package chat;

message Bundle {
  bytes identity = 1;
  bytes signed_pre_key = 2;
  bytes signature = 3;
}

message BundleContainer {
  Bundle bundle = 1;
  bytes private_signed_pre_key = 2;
}

// What is sent through the wire
// Rename to ChatMessagePayload?
message OneToOnePayload {
  string content = 1;
  string content_type = 2;
  string message_type = 3;
  int64 clock_value = 4;
}

message ContactUpdatePayload {
  string name = 1;
  string profile_image = 2;
  string address = 3;
  string fcm_token = 4;
}

message OneToOneRPC {
  string src = 1;
  string dst = 2;
  OneToOnePayload payload = 3;
}

message ContactUpdateRPC {
  string src = 1;
  string dst = 2;
  ContactUpdatePayload payload = 3;
}

// Sent among peers, needs to be encrypted
message DirectMessageProtocol {
  // Which ephemeral key has been used
  oneof ephemeral_key {
    bytes bundle_key = 1;
    bytes dh_key = 2;
    bytes sym_key = 3;
  }
  // The bundle used in case of x3dh
  bytes bundle_id = 4;

  bytes payload = 5;
}

// Message sent among peers
message ProtocolMessage {
  // An optional bundle is exchanged with each message

  Bundle bundle = 1;
  oneof message_type {
    // One to one message encrypted
    DirectMessageProtocol direct_message = 101;
    // Public chats, not encrypted
    bytes public_message = 102;
  }
}

// Decrypted incoming message
message ProtocolMessageIncoming {
  oneof message_type {
    bytes one_to_one_message = 1;
    bytes public_message = 2;
  }
}
