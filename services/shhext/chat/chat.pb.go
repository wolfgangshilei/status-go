// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Bundle struct {
	Identity             []byte   `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	SignedPreKey         []byte   `protobuf:"bytes,2,opt,name=signed_pre_key,json=signedPreKey,proto3" json:"signed_pre_key,omitempty"`
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bundle) Reset()         { *m = Bundle{} }
func (m *Bundle) String() string { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()    {}
func (*Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_293e4c3474bb1eaa, []int{0}
}
func (m *Bundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bundle.Unmarshal(m, b)
}
func (m *Bundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bundle.Marshal(b, m, deterministic)
}
func (dst *Bundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundle.Merge(dst, src)
}
func (m *Bundle) XXX_Size() int {
	return xxx_messageInfo_Bundle.Size(m)
}
func (m *Bundle) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundle.DiscardUnknown(m)
}

var xxx_messageInfo_Bundle proto.InternalMessageInfo

func (m *Bundle) GetIdentity() []byte {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *Bundle) GetSignedPreKey() []byte {
	if m != nil {
		return m.SignedPreKey
	}
	return nil
}

func (m *Bundle) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BundleContainer struct {
	Bundle               *Bundle  `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	PrivateSignedPreKey  []byte   `protobuf:"bytes,2,opt,name=private_signed_pre_key,json=privateSignedPreKey,proto3" json:"private_signed_pre_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BundleContainer) Reset()         { *m = BundleContainer{} }
func (m *BundleContainer) String() string { return proto.CompactTextString(m) }
func (*BundleContainer) ProtoMessage()    {}
func (*BundleContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_293e4c3474bb1eaa, []int{1}
}
func (m *BundleContainer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BundleContainer.Unmarshal(m, b)
}
func (m *BundleContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BundleContainer.Marshal(b, m, deterministic)
}
func (dst *BundleContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleContainer.Merge(dst, src)
}
func (m *BundleContainer) XXX_Size() int {
	return xxx_messageInfo_BundleContainer.Size(m)
}
func (m *BundleContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleContainer.DiscardUnknown(m)
}

var xxx_messageInfo_BundleContainer proto.InternalMessageInfo

func (m *BundleContainer) GetBundle() *Bundle {
	if m != nil {
		return m.Bundle
	}
	return nil
}

func (m *BundleContainer) GetPrivateSignedPreKey() []byte {
	if m != nil {
		return m.PrivateSignedPreKey
	}
	return nil
}

// What is sent through the wire
type OneToOnePayload struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ContentType          string   `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	MessageType          string   `protobuf:"bytes,3,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	ClockValue           int64    `protobuf:"varint,4,opt,name=clock_value,json=clockValue,proto3" json:"clock_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OneToOnePayload) Reset()         { *m = OneToOnePayload{} }
func (m *OneToOnePayload) String() string { return proto.CompactTextString(m) }
func (*OneToOnePayload) ProtoMessage()    {}
func (*OneToOnePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_293e4c3474bb1eaa, []int{2}
}
func (m *OneToOnePayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OneToOnePayload.Unmarshal(m, b)
}
func (m *OneToOnePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OneToOnePayload.Marshal(b, m, deterministic)
}
func (dst *OneToOnePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneToOnePayload.Merge(dst, src)
}
func (m *OneToOnePayload) XXX_Size() int {
	return xxx_messageInfo_OneToOnePayload.Size(m)
}
func (m *OneToOnePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_OneToOnePayload.DiscardUnknown(m)
}

var xxx_messageInfo_OneToOnePayload proto.InternalMessageInfo

func (m *OneToOnePayload) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *OneToOnePayload) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *OneToOnePayload) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *OneToOnePayload) GetClockValue() int64 {
	if m != nil {
		return m.ClockValue
	}
	return 0
}

type ContactUpdatePayload struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProfileImage         string   `protobuf:"bytes,2,opt,name=profile_image,json=profileImage,proto3" json:"profile_image,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	FcmToken             string   `protobuf:"bytes,4,opt,name=fcm_token,json=fcmToken,proto3" json:"fcm_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactUpdatePayload) Reset()         { *m = ContactUpdatePayload{} }
func (m *ContactUpdatePayload) String() string { return proto.CompactTextString(m) }
func (*ContactUpdatePayload) ProtoMessage()    {}
func (*ContactUpdatePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_293e4c3474bb1eaa, []int{3}
}
func (m *ContactUpdatePayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactUpdatePayload.Unmarshal(m, b)
}
func (m *ContactUpdatePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactUpdatePayload.Marshal(b, m, deterministic)
}
func (dst *ContactUpdatePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactUpdatePayload.Merge(dst, src)
}
func (m *ContactUpdatePayload) XXX_Size() int {
	return xxx_messageInfo_ContactUpdatePayload.Size(m)
}
func (m *ContactUpdatePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactUpdatePayload.DiscardUnknown(m)
}

var xxx_messageInfo_ContactUpdatePayload proto.InternalMessageInfo

func (m *ContactUpdatePayload) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContactUpdatePayload) GetProfileImage() string {
	if m != nil {
		return m.ProfileImage
	}
	return ""
}

func (m *ContactUpdatePayload) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ContactUpdatePayload) GetFcmToken() string {
	if m != nil {
		return m.FcmToken
	}
	return ""
}

// Sent to the RPC
type DirectMessageRPC struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
	// Types that are valid to be assigned to MessageType:
	//	*DirectMessageRPC_OneToOnePayload
	//	*DirectMessageRPC_ContactUpdatePayload
	MessageType isDirectMessageRPC_MessageType `protobuf_oneof:"message_type"`
	// Eventually removed if we persist bundles in status-go
	//
	// Types that are valid to be assigned to EncryptionInfo:
	//	*DirectMessageRPC_BundleId
	//	*DirectMessageRPC_SymKeyId
	EncryptionInfo       isDirectMessageRPC_EncryptionInfo `protobuf_oneof:"encryption_info"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DirectMessageRPC) Reset()         { *m = DirectMessageRPC{} }
func (m *DirectMessageRPC) String() string { return proto.CompactTextString(m) }
func (*DirectMessageRPC) ProtoMessage()    {}
func (*DirectMessageRPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_293e4c3474bb1eaa, []int{4}
}
func (m *DirectMessageRPC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectMessageRPC.Unmarshal(m, b)
}
func (m *DirectMessageRPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectMessageRPC.Marshal(b, m, deterministic)
}
func (dst *DirectMessageRPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectMessageRPC.Merge(dst, src)
}
func (m *DirectMessageRPC) XXX_Size() int {
	return xxx_messageInfo_DirectMessageRPC.Size(m)
}
func (m *DirectMessageRPC) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectMessageRPC.DiscardUnknown(m)
}

var xxx_messageInfo_DirectMessageRPC proto.InternalMessageInfo

type isDirectMessageRPC_MessageType interface {
	isDirectMessageRPC_MessageType()
}
type isDirectMessageRPC_EncryptionInfo interface {
	isDirectMessageRPC_EncryptionInfo()
}

type DirectMessageRPC_OneToOnePayload struct {
	OneToOnePayload *OneToOnePayload `protobuf:"bytes,101,opt,name=one_to_one_payload,json=oneToOnePayload,proto3,oneof"`
}
type DirectMessageRPC_ContactUpdatePayload struct {
	ContactUpdatePayload *ContactUpdatePayload `protobuf:"bytes,102,opt,name=contact_update_payload,json=contactUpdatePayload,proto3,oneof"`
}
type DirectMessageRPC_BundleId struct {
	BundleId string `protobuf:"bytes,1000,opt,name=bundle_id,json=bundleId,proto3,oneof"`
}
type DirectMessageRPC_SymKeyId struct {
	SymKeyId string `protobuf:"bytes,1001,opt,name=sym_key_id,json=symKeyId,proto3,oneof"`
}

func (*DirectMessageRPC_OneToOnePayload) isDirectMessageRPC_MessageType()      {}
func (*DirectMessageRPC_ContactUpdatePayload) isDirectMessageRPC_MessageType() {}
func (*DirectMessageRPC_BundleId) isDirectMessageRPC_EncryptionInfo()          {}
func (*DirectMessageRPC_SymKeyId) isDirectMessageRPC_EncryptionInfo()          {}

func (m *DirectMessageRPC) GetMessageType() isDirectMessageRPC_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}
func (m *DirectMessageRPC) GetEncryptionInfo() isDirectMessageRPC_EncryptionInfo {
	if m != nil {
		return m.EncryptionInfo
	}
	return nil
}

func (m *DirectMessageRPC) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *DirectMessageRPC) GetOneToOnePayload() *OneToOnePayload {
	if x, ok := m.GetMessageType().(*DirectMessageRPC_OneToOnePayload); ok {
		return x.OneToOnePayload
	}
	return nil
}

func (m *DirectMessageRPC) GetContactUpdatePayload() *ContactUpdatePayload {
	if x, ok := m.GetMessageType().(*DirectMessageRPC_ContactUpdatePayload); ok {
		return x.ContactUpdatePayload
	}
	return nil
}

func (m *DirectMessageRPC) GetBundleId() string {
	if x, ok := m.GetEncryptionInfo().(*DirectMessageRPC_BundleId); ok {
		return x.BundleId
	}
	return ""
}

func (m *DirectMessageRPC) GetSymKeyId() string {
	if x, ok := m.GetEncryptionInfo().(*DirectMessageRPC_SymKeyId); ok {
		return x.SymKeyId
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DirectMessageRPC) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DirectMessageRPC_OneofMarshaler, _DirectMessageRPC_OneofUnmarshaler, _DirectMessageRPC_OneofSizer, []interface{}{
		(*DirectMessageRPC_OneToOnePayload)(nil),
		(*DirectMessageRPC_ContactUpdatePayload)(nil),
		(*DirectMessageRPC_BundleId)(nil),
		(*DirectMessageRPC_SymKeyId)(nil),
	}
}

func _DirectMessageRPC_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DirectMessageRPC)
	// message_type
	switch x := m.MessageType.(type) {
	case *DirectMessageRPC_OneToOnePayload:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OneToOnePayload); err != nil {
			return err
		}
	case *DirectMessageRPC_ContactUpdatePayload:
		b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContactUpdatePayload); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DirectMessageRPC.MessageType has unexpected type %T", x)
	}
	// encryption_info
	switch x := m.EncryptionInfo.(type) {
	case *DirectMessageRPC_BundleId:
		b.EncodeVarint(1000<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.BundleId)
	case *DirectMessageRPC_SymKeyId:
		b.EncodeVarint(1001<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.SymKeyId)
	case nil:
	default:
		return fmt.Errorf("DirectMessageRPC.EncryptionInfo has unexpected type %T", x)
	}
	return nil
}

func _DirectMessageRPC_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DirectMessageRPC)
	switch tag {
	case 101: // message_type.one_to_one_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OneToOnePayload)
		err := b.DecodeMessage(msg)
		m.MessageType = &DirectMessageRPC_OneToOnePayload{msg}
		return true, err
	case 102: // message_type.contact_update_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContactUpdatePayload)
		err := b.DecodeMessage(msg)
		m.MessageType = &DirectMessageRPC_ContactUpdatePayload{msg}
		return true, err
	case 1000: // encryption_info.bundle_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.EncryptionInfo = &DirectMessageRPC_BundleId{x}
		return true, err
	case 1001: // encryption_info.sym_key_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.EncryptionInfo = &DirectMessageRPC_SymKeyId{x}
		return true, err
	default:
		return false, nil
	}
}

func _DirectMessageRPC_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DirectMessageRPC)
	// message_type
	switch x := m.MessageType.(type) {
	case *DirectMessageRPC_OneToOnePayload:
		s := proto.Size(x.OneToOnePayload)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DirectMessageRPC_ContactUpdatePayload:
		s := proto.Size(x.ContactUpdatePayload)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// encryption_info
	switch x := m.EncryptionInfo.(type) {
	case *DirectMessageRPC_BundleId:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.BundleId)))
		n += len(x.BundleId)
	case *DirectMessageRPC_SymKeyId:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.SymKeyId)))
		n += len(x.SymKeyId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Sent among peers
type DirectMessageProtocol struct {
	// Which ephemeral key has been used
	EphemeralKey []byte `protobuf:"bytes,1,opt,name=ephemeral_key,json=ephemeralKey,proto3" json:"ephemeral_key,omitempty"`
	// Bundle pre key in case of x3dh
	BundlePreKey []byte `protobuf:"bytes,2,opt,name=bundle_pre_key,json=bundlePreKey,proto3" json:"bundle_pre_key,omitempty"`
	// Types that are valid to be assigned to MessageType:
	//	*DirectMessageProtocol_OneToOnePayload
	//	*DirectMessageProtocol_ContactUpdatePayload
	MessageType          isDirectMessageProtocol_MessageType `protobuf_oneof:"message_type"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *DirectMessageProtocol) Reset()         { *m = DirectMessageProtocol{} }
func (m *DirectMessageProtocol) String() string { return proto.CompactTextString(m) }
func (*DirectMessageProtocol) ProtoMessage()    {}
func (*DirectMessageProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_293e4c3474bb1eaa, []int{5}
}
func (m *DirectMessageProtocol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectMessageProtocol.Unmarshal(m, b)
}
func (m *DirectMessageProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectMessageProtocol.Marshal(b, m, deterministic)
}
func (dst *DirectMessageProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectMessageProtocol.Merge(dst, src)
}
func (m *DirectMessageProtocol) XXX_Size() int {
	return xxx_messageInfo_DirectMessageProtocol.Size(m)
}
func (m *DirectMessageProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectMessageProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_DirectMessageProtocol proto.InternalMessageInfo

type isDirectMessageProtocol_MessageType interface {
	isDirectMessageProtocol_MessageType()
}

type DirectMessageProtocol_OneToOnePayload struct {
	OneToOnePayload []byte `protobuf:"bytes,101,opt,name=one_to_one_payload,json=oneToOnePayload,proto3,oneof"`
}
type DirectMessageProtocol_ContactUpdatePayload struct {
	ContactUpdatePayload []byte `protobuf:"bytes,102,opt,name=contact_update_payload,json=contactUpdatePayload,proto3,oneof"`
}

func (*DirectMessageProtocol_OneToOnePayload) isDirectMessageProtocol_MessageType()      {}
func (*DirectMessageProtocol_ContactUpdatePayload) isDirectMessageProtocol_MessageType() {}

func (m *DirectMessageProtocol) GetMessageType() isDirectMessageProtocol_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (m *DirectMessageProtocol) GetEphemeralKey() []byte {
	if m != nil {
		return m.EphemeralKey
	}
	return nil
}

func (m *DirectMessageProtocol) GetBundlePreKey() []byte {
	if m != nil {
		return m.BundlePreKey
	}
	return nil
}

func (m *DirectMessageProtocol) GetOneToOnePayload() []byte {
	if x, ok := m.GetMessageType().(*DirectMessageProtocol_OneToOnePayload); ok {
		return x.OneToOnePayload
	}
	return nil
}

func (m *DirectMessageProtocol) GetContactUpdatePayload() []byte {
	if x, ok := m.GetMessageType().(*DirectMessageProtocol_ContactUpdatePayload); ok {
		return x.ContactUpdatePayload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DirectMessageProtocol) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DirectMessageProtocol_OneofMarshaler, _DirectMessageProtocol_OneofUnmarshaler, _DirectMessageProtocol_OneofSizer, []interface{}{
		(*DirectMessageProtocol_OneToOnePayload)(nil),
		(*DirectMessageProtocol_ContactUpdatePayload)(nil),
	}
}

func _DirectMessageProtocol_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DirectMessageProtocol)
	// message_type
	switch x := m.MessageType.(type) {
	case *DirectMessageProtocol_OneToOnePayload:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.OneToOnePayload)
	case *DirectMessageProtocol_ContactUpdatePayload:
		b.EncodeVarint(102<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.ContactUpdatePayload)
	case nil:
	default:
		return fmt.Errorf("DirectMessageProtocol.MessageType has unexpected type %T", x)
	}
	return nil
}

func _DirectMessageProtocol_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DirectMessageProtocol)
	switch tag {
	case 101: // message_type.one_to_one_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.MessageType = &DirectMessageProtocol_OneToOnePayload{x}
		return true, err
	case 102: // message_type.contact_update_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.MessageType = &DirectMessageProtocol_ContactUpdatePayload{x}
		return true, err
	default:
		return false, nil
	}
}

func _DirectMessageProtocol_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DirectMessageProtocol)
	// message_type
	switch x := m.MessageType.(type) {
	case *DirectMessageProtocol_OneToOnePayload:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.OneToOnePayload)))
		n += len(x.OneToOnePayload)
	case *DirectMessageProtocol_ContactUpdatePayload:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ContactUpdatePayload)))
		n += len(x.ContactUpdatePayload)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Message sent to RPC
type RPCMessage struct {
	// Types that are valid to be assigned to MessageType:
	//	*RPCMessage_DirectMessageRpc
	MessageType          isRPCMessage_MessageType `protobuf_oneof:"message_type"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RPCMessage) Reset()         { *m = RPCMessage{} }
func (m *RPCMessage) String() string { return proto.CompactTextString(m) }
func (*RPCMessage) ProtoMessage()    {}
func (*RPCMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_293e4c3474bb1eaa, []int{6}
}
func (m *RPCMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCMessage.Unmarshal(m, b)
}
func (m *RPCMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCMessage.Marshal(b, m, deterministic)
}
func (dst *RPCMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCMessage.Merge(dst, src)
}
func (m *RPCMessage) XXX_Size() int {
	return xxx_messageInfo_RPCMessage.Size(m)
}
func (m *RPCMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RPCMessage proto.InternalMessageInfo

type isRPCMessage_MessageType interface {
	isRPCMessage_MessageType()
}

type RPCMessage_DirectMessageRpc struct {
	DirectMessageRpc *DirectMessageRPC `protobuf:"bytes,1,opt,name=direct_message_rpc,json=directMessageRpc,proto3,oneof"`
}

func (*RPCMessage_DirectMessageRpc) isRPCMessage_MessageType() {}

func (m *RPCMessage) GetMessageType() isRPCMessage_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (m *RPCMessage) GetDirectMessageRpc() *DirectMessageRPC {
	if x, ok := m.GetMessageType().(*RPCMessage_DirectMessageRpc); ok {
		return x.DirectMessageRpc
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RPCMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RPCMessage_OneofMarshaler, _RPCMessage_OneofUnmarshaler, _RPCMessage_OneofSizer, []interface{}{
		(*RPCMessage_DirectMessageRpc)(nil),
	}
}

func _RPCMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RPCMessage)
	// message_type
	switch x := m.MessageType.(type) {
	case *RPCMessage_DirectMessageRpc:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DirectMessageRpc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RPCMessage.MessageType has unexpected type %T", x)
	}
	return nil
}

func _RPCMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RPCMessage)
	switch tag {
	case 1: // message_type.direct_message_rpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DirectMessageRPC)
		err := b.DecodeMessage(msg)
		m.MessageType = &RPCMessage_DirectMessageRpc{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RPCMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RPCMessage)
	// message_type
	switch x := m.MessageType.(type) {
	case *RPCMessage_DirectMessageRpc:
		s := proto.Size(x.DirectMessageRpc)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Message sent among peers
type ProtocolMessage struct {
	Bundle *Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	// Types that are valid to be assigned to MessageType:
	//	*ProtocolMessage_DirectMessage
	MessageType          isProtocolMessage_MessageType `protobuf_oneof:"message_type"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ProtocolMessage) Reset()         { *m = ProtocolMessage{} }
func (m *ProtocolMessage) String() string { return proto.CompactTextString(m) }
func (*ProtocolMessage) ProtoMessage()    {}
func (*ProtocolMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_293e4c3474bb1eaa, []int{7}
}
func (m *ProtocolMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolMessage.Unmarshal(m, b)
}
func (m *ProtocolMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolMessage.Marshal(b, m, deterministic)
}
func (dst *ProtocolMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolMessage.Merge(dst, src)
}
func (m *ProtocolMessage) XXX_Size() int {
	return xxx_messageInfo_ProtocolMessage.Size(m)
}
func (m *ProtocolMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolMessage proto.InternalMessageInfo

type isProtocolMessage_MessageType interface {
	isProtocolMessage_MessageType()
}

type ProtocolMessage_DirectMessage struct {
	DirectMessage *DirectMessageProtocol `protobuf:"bytes,101,opt,name=direct_message,json=directMessage,proto3,oneof"`
}

func (*ProtocolMessage_DirectMessage) isProtocolMessage_MessageType() {}

func (m *ProtocolMessage) GetMessageType() isProtocolMessage_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (m *ProtocolMessage) GetBundle() *Bundle {
	if m != nil {
		return m.Bundle
	}
	return nil
}

func (m *ProtocolMessage) GetDirectMessage() *DirectMessageProtocol {
	if x, ok := m.GetMessageType().(*ProtocolMessage_DirectMessage); ok {
		return x.DirectMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProtocolMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProtocolMessage_OneofMarshaler, _ProtocolMessage_OneofUnmarshaler, _ProtocolMessage_OneofSizer, []interface{}{
		(*ProtocolMessage_DirectMessage)(nil),
	}
}

func _ProtocolMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProtocolMessage)
	// message_type
	switch x := m.MessageType.(type) {
	case *ProtocolMessage_DirectMessage:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DirectMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ProtocolMessage.MessageType has unexpected type %T", x)
	}
	return nil
}

func _ProtocolMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProtocolMessage)
	switch tag {
	case 101: // message_type.direct_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DirectMessageProtocol)
		err := b.DecodeMessage(msg)
		m.MessageType = &ProtocolMessage_DirectMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ProtocolMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProtocolMessage)
	// message_type
	switch x := m.MessageType.(type) {
	case *ProtocolMessage_DirectMessage:
		s := proto.Size(x.DirectMessage)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Bundle)(nil), "chat.Bundle")
	proto.RegisterType((*BundleContainer)(nil), "chat.BundleContainer")
	proto.RegisterType((*OneToOnePayload)(nil), "chat.OneToOnePayload")
	proto.RegisterType((*ContactUpdatePayload)(nil), "chat.ContactUpdatePayload")
	proto.RegisterType((*DirectMessageRPC)(nil), "chat.DirectMessageRPC")
	proto.RegisterType((*DirectMessageProtocol)(nil), "chat.DirectMessageProtocol")
	proto.RegisterType((*RPCMessage)(nil), "chat.RPCMessage")
	proto.RegisterType((*ProtocolMessage)(nil), "chat.ProtocolMessage")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_chat_293e4c3474bb1eaa) }

var fileDescriptor_chat_293e4c3474bb1eaa = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0x8e, 0x09, 0x02, 0x32, 0x98, 0x84, 0xdf, 0xfe, 0x00, 0x59, 0x50, 0x15, 0xea, 0x72, 0xe0,
	0x52, 0x0e, 0x45, 0xea, 0x03, 0x00, 0xaa, 0x82, 0x50, 0x45, 0xb4, 0xa5, 0xbd, 0xae, 0x96, 0xdd,
	0x09, 0x58, 0xb1, 0x77, 0x2d, 0x7b, 0x83, 0xe4, 0x17, 0xe8, 0xad, 0x97, 0x3e, 0x42, 0xdf, 0xaa,
	0x6f, 0xd0, 0xbe, 0x45, 0xb5, 0x7f, 0x9c, 0x36, 0x69, 0xa8, 0x7a, 0xca, 0xce, 0xe7, 0x4f, 0x33,
	0xdf, 0x7c, 0x33, 0x13, 0x00, 0xf1, 0xc0, 0xcd, 0x69, 0x59, 0x69, 0xa3, 0xc9, 0xaa, 0x7d, 0xa7,
	0x0f, 0xb0, 0x76, 0x3e, 0x55, 0x32, 0x47, 0xb2, 0x0f, 0x1b, 0x99, 0x44, 0x65, 0x32, 0xd3, 0x24,
	0xd1, 0x51, 0x74, 0x12, 0xd3, 0x59, 0x4c, 0x8e, 0xa1, 0x5f, 0x67, 0xf7, 0x0a, 0x25, 0x2b, 0x2b,
	0x64, 0x13, 0x6c, 0x92, 0x15, 0xc7, 0x88, 0x3d, 0x3a, 0xaa, 0xf0, 0x1a, 0x1b, 0xf2, 0x0c, 0x7a,
	0x36, 0xe6, 0x66, 0x5a, 0x61, 0xd2, 0x75, 0x84, 0x5f, 0x40, 0x9a, 0xc3, 0xc0, 0x57, 0xba, 0xd0,
	0xca, 0xf0, 0x4c, 0x61, 0x45, 0x8e, 0x61, 0xed, 0xce, 0x41, 0xae, 0xe0, 0xe6, 0xeb, 0xf8, 0xd4,
	0xe9, 0xf3, 0x34, 0x1a, 0xbe, 0x91, 0x33, 0xd8, 0x2b, 0xab, 0xec, 0x91, 0x1b, 0x64, 0x4b, 0x45,
	0xfc, 0x1f, 0xbe, 0xbe, 0xff, 0x4d, 0x4b, 0xfa, 0x25, 0x82, 0xc1, 0x8d, 0xc2, 0x5b, 0x7d, 0xa3,
	0x70, 0xc4, 0x9b, 0x5c, 0x73, 0x49, 0x12, 0x58, 0x17, 0x5a, 0x19, 0x54, 0xc6, 0xd5, 0xeb, 0xd1,
	0x36, 0x24, 0x2f, 0x20, 0x0e, 0x4f, 0x66, 0x9a, 0x12, 0x5d, 0xe2, 0x1e, 0xdd, 0x0c, 0xd8, 0x6d,
	0x53, 0xa2, 0xa5, 0x14, 0x58, 0xd7, 0xfc, 0x1e, 0x3d, 0xa5, 0xeb, 0x29, 0x01, 0x73, 0x94, 0x43,
	0xd8, 0x14, 0xb9, 0x16, 0x13, 0xf6, 0xc8, 0xf3, 0x29, 0x26, 0xab, 0x47, 0xd1, 0x49, 0x97, 0x82,
	0x83, 0x3e, 0x5a, 0x24, 0xfd, 0x14, 0xc1, 0x8e, 0xeb, 0x5e, 0x98, 0x0f, 0xa5, 0xe4, 0x66, 0xa6,
	0x8c, 0xc0, 0xaa, 0xe2, 0x05, 0x06, 0x59, 0xee, 0x4d, 0x5e, 0xc2, 0x56, 0x59, 0xe9, 0x71, 0x96,
	0x23, 0xcb, 0x0a, 0x7e, 0xdf, 0x8a, 0x8a, 0x03, 0x78, 0x65, 0x31, 0xdb, 0x12, 0x97, 0xb2, 0xc2,
	0xba, 0x0e, 0x82, 0xda, 0x90, 0x1c, 0x40, 0x6f, 0x2c, 0x0a, 0x66, 0xf4, 0x04, 0x95, 0x93, 0xd2,
	0xa3, 0x1b, 0x63, 0x51, 0xdc, 0xda, 0x38, 0xfd, 0xba, 0x02, 0xdb, 0x97, 0x59, 0x85, 0xc2, 0xbc,
	0xf3, 0xfa, 0xe9, 0xe8, 0x82, 0x6c, 0x43, 0x57, 0xd6, 0x26, 0xcc, 0xde, 0x3e, 0xc9, 0x25, 0x10,
	0xad, 0x90, 0x19, 0xcd, 0xec, 0x4f, 0xe9, 0xc5, 0x26, 0xe8, 0x66, 0xb5, 0xeb, 0x67, 0xb5, 0xe0,
	0xf1, 0xb0, 0x43, 0x07, 0x7a, 0xc1, 0x76, 0x0a, 0x7b, 0xc2, 0x37, 0xcd, 0xa6, 0xae, 0xeb, 0x59,
	0xa6, 0xb1, 0xcb, 0xb4, 0xef, 0x33, 0x2d, 0x33, 0x66, 0xd8, 0xa1, 0x3b, 0x62, 0x99, 0x61, 0xcf,
	0xa1, 0xe7, 0xb7, 0x83, 0x65, 0x32, 0xf9, 0xbe, 0x6e, 0xdb, 0x1b, 0x46, 0x74, 0xc3, 0x63, 0x57,
	0x92, 0x1c, 0x02, 0xd4, 0x4d, 0x61, 0x97, 0xc4, 0x12, 0x7e, 0xcc, 0x08, 0x75, 0x53, 0x5c, 0x63,
	0x73, 0x25, 0xcf, 0xfb, 0xf3, 0xe3, 0x3c, 0xff, 0x0f, 0x06, 0xa8, 0x44, 0xd5, 0x94, 0x26, 0xd3,
	0x8a, 0x65, 0x6a, 0xac, 0xd3, 0x6f, 0x11, 0xec, 0xce, 0x99, 0x34, 0xb2, 0x77, 0x23, 0x74, 0x6e,
	0x47, 0x83, 0xe5, 0x03, 0x16, 0x58, 0xf1, 0xdc, 0x2d, 0xa2, 0xf7, 0x2c, 0x9e, 0x81, 0xf6, 0x1a,
	0x8e, 0xa1, 0x1f, 0x24, 0x2e, 0xdc, 0x8c, 0x47, 0xc3, 0xcd, 0xbc, 0x7a, 0xd2, 0xe2, 0x78, 0x99,
	0x97, 0x6f, 0xfe, 0xea, 0x65, 0xfc, 0x94, 0x5f, 0x8b, 0xed, 0xa6, 0x12, 0x80, 0x8e, 0x2e, 0x42,
	0x5f, 0xe4, 0x2d, 0x10, 0xe9, 0x1a, 0x65, 0x2d, 0xa9, 0x2a, 0x45, 0xb8, 0xc9, 0x3d, 0x3f, 0x9d,
	0xc5, 0x6d, 0x19, 0x76, 0xe8, 0xb6, 0x9c, 0xc3, 0x4a, 0xf1, 0x47, 0x95, 0xcf, 0x11, 0x0c, 0x5a,
	0xd3, 0xda, 0x5a, 0xff, 0x76, 0xf3, 0x97, 0xd0, 0x9f, 0x57, 0x14, 0xb6, 0xee, 0x60, 0x89, 0x9a,
	0xb6, 0xc2, 0xb0, 0x43, 0xb7, 0xe6, 0x24, 0x2d, 0xea, 0xb9, 0x5b, 0x73, 0xff, 0x7c, 0x67, 0x3f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x85, 0xaf, 0x5b, 0x07, 0x05, 0x00, 0x00,
}
